#!/usr/bin/env python3
"""Cache class
"""


import uuid
import redis
from typing import Union, Callable, Optional


class Cache:
    def __init__(self):
        """
        Initializes a new instance of the class.

        This method creates a new instance of the class
        and initializes the `_redis` attribute
        with a new instance of the `Redis` class.
        It then calls the `flushdb` method on the
        `_redis` instance to clear the database.

        Parameters:
        - None

        Returns:
        - None
        """
        self._redis = redis.Redis()
        self._redis.flushdb()

    def store(self, data: Union[str, bytes, int, float]) -> str:
        """
        This method stores the provided data in the
        Redis database with a unique key generated by uuid.uuid4.

        Parameters:
        - data: Union[str, bytes, int, float] -
        The data to be stored in the database.

        Returns:
        - str - The key under which the data is stored in the database.
        """
        key = str(uuid.uuid4())
        self._redis.set(key, data)
        return key

    def get(self, key: str, fn: Optional[Callable] =
            None) -> Union[str, bytes, int, float, None]:
        """
        Retrieves the value associated with
        the given key from the Redis database.

        Parameters:
            key (str): The key to retrieve the value for.
            fn (Optional[Callable], optional): An optional
            function to apply to the retrieved value. Defaults to None.

        Returns:
            Union[str, bytes, int, float, None]:
            The retrieved value if it exists, None
            otherwise. If a function is provided,
            the value will be passed to the function
            and the result will be returned.
        """
        value = self._redis.get(key)
        if value is None:
            return None
        if fn:
            return fn(value)
        return value

    def get_str(self, key: str) -> Union[str, None]:
        """
        Retrieves the value associated with the given
        key from the Redis database and decodes it as a string.

        Parameters:
            key (str): The key to retrieve the value for.

        Returns:
            Union[str, None]: The retrieved value
            decoded as a string if it exists, None otherwise.
        """
        return self.get(key, fn=lambda d: d.decode("utf-8"))

    def get_int(self, key: str) -> Union[int, None]:
        """
        Retrieves the value associated with the given
        key from the Redis database and converts it to an integer.

        Parameters:
            key (str): The key to retrieve the value for.

        Returns:
            Union[int, None]: The retrieved value
            converted to an integer if it exists, None otherwise.
        """
        return self.get(key, fn=int)
